#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import shutil
import sys

from exceptions import SystemConfigurationError
import snapper_timer_control as stc
from logger import logger
from argument_parser import parse_args
import snapshot_handler
import path_tools


def main():
    snapshot_dir, file_or_dir_to_del_org = parse_args()

    # find snapshot dir if none is given
    if snapshot_dir is None:
        snapshot_dir = path_tools.search_snapshot_dir_upwards(file_or_dir_to_del_org)

    # Check if the snapshot directory exists
    if not snapshot_dir.is_dir():
        logger.error("The snapshot directory does not exist.")
        sys.exit(1)

    # Do snapper timer exist?
    try:
        stc.check_snapper_systemd_timers_exist()
    except SystemConfigurationError as e:
        logger.error(e)
        logger.error("This script is designed to work only with systemd timers.")
        logger.error("Aborting. changed nothing.")
        sys.exit(1)

    stc.stop_snapper_timers()
    logger.info("Snapshot directory: " + str(snapshot_dir))

    snapshot_conf_dirs = snapshot_dir.glob("*")  # glob used here like ls
    snapshot_dirs = [snapshot_dir / snapshot_conf / "snapshot" for snapshot_conf in snapshot_conf_dirs]

    file_or_dir_to_del = path_tools.get_path_relative_to_snapshot(file_or_dir_to_del_org, snapshot_dir)

    possible_paths_to_delete = [snapshot / file_or_dir_to_del for snapshot in snapshot_dirs]

    paths_to_delete = []

    # Check if the file/directory to delete exists in any of the snapshots
    for path in possible_paths_to_delete:
        if path.exists():
            paths_to_delete.append(path)

    # Check if the file/directory to delete exists in any of the snapshots
    if len(paths_to_delete) == 0:
        logger.error("The file/directory to delete does not exist in any of the snapshots.")
        stc.resume_snapper_timers_and_exit(exit_code=1)

    print("\nThe following files/directories will be deleted:")
    for path in paths_to_delete:
        print(path)

    # Ask the user if they want to continue
    print(f"\nFound {len(paths_to_delete)} snapshots with files/directories to delete.")
    answer = input(f"Do you want to continue? [y/N] ")
    if answer.lower() != "y":
        print("Aborting.")
        stc.resume_snapper_timers_and_exit(exit_code=1)

    # Filter all snapshot_dirs so that only the ones that contain the file/directory to delete remain
    filtered_snapshot_dirs = []
    for s_dir in snapshot_dirs:
        # check if the dir is relative to any of any paths to delete
        if any(path_to_del.is_relative_to(s_dir) for path_to_del in paths_to_delete):
            filtered_snapshot_dirs.append(s_dir)

    # Find the read-only snapshots
    read_only_snapshots = snapshot_handler.find_read_only_snapshots(filtered_snapshot_dirs)

    # Set the read-only snapshots writable
    snapshot_handler.set_snapshots_writable(read_only_snapshots)

    # reverse paths_to_delete so that we delete from the newest snapshot to the oldest
    paths_to_delete.reverse()

    # Delete the files/directories
    for path in paths_to_delete:
        logger.info("Deleting: " + str(path))

        try:
            if os.path.isdir(path):
                shutil.rmtree(path)
            else:
                os.remove(path)
        except Exception as e:
            logger.error(f"WARNING: Could not delete: {path}")
            logger.warning(f"Most likely the snapshot couldn't be made writable. Exception is: {e}")
            logger.warning("Continuing...")
            continue

    # Make the read-only snapshots read-only again
    snapshot_handler.restore_snapshot_permissions()

    # Ask the user if they also want to delete the file from the current system
    # check if the file/directory to delete exists in the current system
    if file_or_dir_to_del_org.exists():
        print(f"\nThe file/directory also exists in the current system: {file_or_dir_to_del_org}")
        answer = input(f"Do you want to delete it also from the current system? [y/N] ")
        if answer.lower() == "y":
            logger.info("Deleting: " + str(file_or_dir_to_del_org))
            try:
                if os.path.isdir(file_or_dir_to_del_org):
                    shutil.rmtree(file_or_dir_to_del_org)
                else:
                    os.remove(file_or_dir_to_del_org)
                print(f"Deleted.")
            except Exception as e:
                logger.error(f"WARNING: Could not delete: {file_or_dir_to_del_org}")
                logger.warning(f"Exception is: {e}")
                logger.warning("Continuing...")
    print(f"")

    # Resume snapper timers
    stc.resume_snapper_timers()
    print(f"Done.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nSIGINT received. Aborting.")
        logger.error("Aborting - Snapshot permissions will be rolled back and timers resumed.")
        snapshot_handler.restore_snapshot_permissions(verbose=True)
        stc.resume_snapper_timers_and_exit(1)

    except Exception as unexpectedMainError:
        logger.error(f"An unexpected error occurred: {unexpectedMainError}")
        # check if traceback can be imported
        if "traceback" in sys.modules:
            import traceback  # fmt: skip

            logger.error(traceback.format_exc())
        else:
            logger.error("Traceback module not found. Install it to get a traceback.")

        logger.error("Aborting - Snapshot permissions will be rolled back and timers resumed.")
        snapshot_handler.restore_snapshot_permissions(verbose=True)
        stc.resume_snapper_timers_and_exit(1)
